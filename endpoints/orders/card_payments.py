import logging

from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.types import ContentType
from aiogram.types.chat import ChatType
from aiogram.types.inline_keyboard import InlineKeyboardMarkup, InlineKeyboardButton

from modules.bot import dp, bot
from modules.config import STRINGS
from modules.data.db_session import create_session
from modules.data.orders import Order
from modules.helper import CallbackStatus, MessageStatus, \
    get_customer_last_name_and_order_items, write_us, delete_and_send


@dp.callback_query_handler(Text(startswith="act:pay-card"), CallbackStatus(2) | CallbackStatus(5))
async def pay_card(callback: types.CallbackQuery):
    """
    Card payment method handler
    :param callback: Telegram callback object
    """
    await callback.answer("–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É")
    order_id = int(callback.data.split()[1])
    session = create_session()
    order = session.query(Order).get(order_id)

    await bot.delete_message(order.customer, order.origin_msg)
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data=f"act:pay-crypto {order.id}"))
    markup.row(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"act:cancel_order {order.id}"))
    _, _, order_items = await get_customer_last_name_and_order_items(order)
    origin_msg_text = f"*–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ {order.id} –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã*\n\n{order_items}\n\n" \
                      f"–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã\\.\n" \
                      f"*–í–ê–ñ–ù–û\\! –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É –Ω–∞–ø–∏—à–∏—Ç–µ:*\n\n" \
                      f"`–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}`\n\n" \
                      f"_–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:_ {STRINGS.card_number}\n\n" \
                      f"–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ " \
                      f"*–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ* —Å–∫—Ä–∏–Ω—à–æ—Ç " \
                      f"—ç–∫—Ä–∞–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ —Ñ–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏, " \
                      f"–≥–¥–µ –≤–∏–¥–Ω–æ —Å—É–º–º—É, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è " \
                      f"–ø–µ—Ä–µ–≤–æ–¥–∞\\. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, {write_us()}"
    origin_msg = await bot.send_message(callback.from_user.id,
                                        origin_msg_text,
                                        reply_markup=markup, disable_web_page_preview=True)

    order.origin_msg = origin_msg.message_id
    order.status = 4
    session.commit()


@dp.message_handler(MessageStatus(4), chat_type=ChatType.PRIVATE, content_types=[ContentType.PHOTO])
async def pay_card_check(message: types.Message):
    """
    Card payment check method handler
    :param message: Telegram message object
    """
    if not message.reply_to_message:
        await message.reply("–ï—Å–ª–∏ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏–µ–π –ø–µ—Ä–µ–≤–æ–¥–∞, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ, "
                            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π "
                            "–ø–æ –ø–µ—Ä–µ–≤–æ–¥—É")
        logging.info("%s user sent a photo without reply_to message", message.from_user.id)
        return

    session = create_session()
    order = session.query(Order).filter(Order.origin_msg == message.reply_to_message.message_id).first()
    if not order:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –≤ –æ—Ç–≤–µ—Ç "
                            "–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É")
        logging.info("%s user sent photo in reply to message without order details",
                     message.from_user.id)
        return

    first_name, last_name, order_items = await get_customer_last_name_and_order_items(order)
    origin_msg_text = f"*–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ {order.id} –æ–∂–∏–¥–∞–µ—Ç " \
                      f"–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã*\n\n{order_items}\n\n" \
                      f"–ù–∞—à–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—Ç —Ñ–∞–∫—Ç " \
                      f"—Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –Ω—É–∂–Ω—É—é —Å—É–º–º—É\\. " \
                      f"–ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç, –º—ã –Ω–∞—á–Ω—ë–º —Å–æ–±–∏—Ä–∞—Ç—å –∑–∞–∫–∞–∑\\. " \
                      f"–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ {write_us()}"

    status_msg_markup = InlineKeyboardMarkup()
    status_msg_markup.row(InlineKeyboardButton("‚úÖ–û–ø–ª–∞—á–µ–Ω–æ", callback_data=f"act:accept-payment {order.id}"),
                          InlineKeyboardButton("‚ùå–ù–ï –æ–ø–ª–∞—á–µ–Ω–æ", callback_data=f"act:deny-card-payment {order.id}"))
    status_msg_text = f"*–ó–∞–∫–∞–∑ ‚Ññ {order.id}*\n\n" \
                      f"*–ö–ª–∏–µ–Ω—Ç\\:* [{first_name} {last_name}]" \
                      f"(tg://user?id={order.customer})\n" \
                      f"*–°–æ—Å—Ç–∞–≤\\:*\n" \
                      f"{order_items}\n\n" \
                      f"*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {order.amount} —Ä—É–±\\.\n" \
                      f"*–ö–æ–º–∏—Å—Å–∏—è \\({STRINGS.fee}%\\)*: {order.total - order.amount} —Ä—É–±\\.\n" \
                      f"*–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {order.total} —Ä—É–±\\.\n" \
                      f"*–°—Ç–∞—Ç—É—Å:* \\#–æ–∂–∏–¥–∞–Ω–∏–µ\\_–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\\_–æ–ø–ª–∞—Ç—ã\n\n" \
                      f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–∫—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã\\.\n" \
                      f"–û–ø–ª–∞—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ *–±–∞–Ω–∫–æ–≤—Å–∫–∏–º –ø–µ—Ä–µ–≤–æ–¥–æ–º*\\. –ù–∞ —Ñ–æ—Ç–æ ‚Äî –∫–≤–∏—Ç–∞–Ω—Ü–∏—è"
    await bot.delete_message(order.customer, order.origin_msg)
    origin_msg = await bot.send_message(order.customer, origin_msg_text,
                                        disable_web_page_preview=True)

    await bot.delete_message(-STRINGS.new_orders_chat_id, order.status_msg)
    status_msg = await bot.send_photo(-STRINGS.new_orders_chat_id, message.photo[0].file_id,
                                      caption=status_msg_text,
                                      reply_markup=status_msg_markup)
    order.origin_msg = origin_msg.message_id
    order.status_msg = status_msg.message_id
    order.status = 6
    session.commit()


@dp.callback_query_handler(Text(startswith="act:deny-payment"), CallbackStatus(6))
async def deny_payment(callback: types.CallbackQuery):
    """
    Deny payment
    :param callback: Telegram callback object
    """
    order_id = callback.data.split()[1]
    session = create_session()
    order = session.query(Order).get(order_id)

    origin_msg_markup = InlineKeyboardMarkup()
    origin_msg_markup.row(InlineKeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥", callback_data=f"act:pay-card {order.id}"))
    origin_msg_markup.row(InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data=f"act:pay-crypto {order.id}"))
    origin_msg_markup.row(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"act:cancel_order {order.id}"))
    first_name, last_name, order_items = await get_customer_last_name_and_order_items(order)
    origin_msg_text = f"*–í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ {order.id} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚ùå*\n\n{order_items}\n\n" \
                      f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order.amount} —Ä—É–±\\.\n" \
                      f"–ö–æ–º–∏—Å—Å–∏—è: {order.total - order.amount} —Ä—É–±\\.\n" \
                      f"*–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {order.total} —Ä—É–±\\.*\n\n" \
                      f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑\\.\n\n" \
                      f"*–°–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:*\n" \
                      f"_{', '.join(STRINGS.crypto_list)}_\n\n" \
                      f"–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º {write_us()}"

    status_msg_text = f"*–ó–∞–∫–∞–∑ ‚Ññ {order.id} \\(–æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\\)*\n\n" \
                      f"*–ö–ª–∏–µ–Ω—Ç\\:* [{first_name} {last_name}]" \
                      f"(tg://user?id={order.customer})\n" \
                      f"*–°–æ—Å—Ç–∞–≤\\:*\n" \
                      f"{order_items}\n\n" \
                      f"*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {order.amount} —Ä—É–±\\.\n" \
                      f"*–ö–æ–º–∏—Å—Å–∏—è \\({STRINGS.fee}%\\)*: {order.total - order.amount} —Ä—É–±\\.\n" \
                      f"*–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {order.total} —Ä—É–±\\.\n" \
                      f"*–°—Ç–∞—Ç—É—Å:* \\#–æ–∂–∏–¥–∞–Ω–∏–µ\\_–æ–ø–ª–∞—Ç—ã\n\n"
    await delete_and_send(session, order, origin_msg_text, status_msg_text,
                          origin_msg_markup=origin_msg_markup)

    order.status = 4
    session.commit()


@dp.callback_query_handler(Text(startswith="act:accept-payment"), CallbackStatus(6))
async def accept_payment(callback: types.CallbackQuery):
    """
    Accept payment
    :param callback: Telegram callback object
    """
    order_id = callback.data.split()[1]
    session = create_session()
    order = session.query(Order).get(order_id)

    first_name, last_name, order_items = await get_customer_last_name_and_order_items(order)
    origin_msg_text = f"*–í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ {order.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚úÖ*\n\n{order_items}\n\n" \
                      f"–°–∫–æ—Ä–æ –º—ã –Ω–∞—á–Ω—ë–º —Å–æ–±–∏—Ä–∞—Ç—å –í–∞—à –∑–∞–∫–∞–∑\\. –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏, " \
                      f"–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, {write_us('—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏')}"

    status_msg_text = f"*–ó–∞–∫–∞–∑ ‚Ññ {order.id} –æ–ø–ª–∞—á–µ–Ω*\n\n" \
                      f"*–ö–ª–∏–µ–Ω—Ç\\:* [{first_name} {last_name}]" \
                      f"(tg://user?id={order.customer})\n" \
                      f"*–°–æ—Å—Ç–∞–≤\\:*\n" \
                      f"{order_items}\n\n" \
                      f"*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {order.amount} —Ä—É–±\\.\n" \
                      f"*–ö–æ–º–∏—Å—Å–∏—è \\({STRINGS.fee}%\\)*: {order.total - order.amount} —Ä—É–±\\.\n" \
                      f"*–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {order.total} —Ä—É–±\\.\n" \
                      f"*–°—Ç–∞—Ç—É—Å:* \\#–æ–ø–ª–∞—á–µ–Ω\n\n"
    await delete_and_send(session, order, origin_msg_text, status_msg_text)

    order.status = 7
    order.stats.comission = order.total - order.amount
    session.commit()
