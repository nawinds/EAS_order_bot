import logging

from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.types import ContentType
from aiogram.types.chat import ChatType
from aiogram.types.inline_keyboard import InlineKeyboardMarkup, InlineKeyboardButton

from modules.bot import dp, bot
from modules.config import STRINGS
from modules.data.db_session import create_session
from modules.data.orders import Order
from modules.helper import CallbackStatus, MessageStatus, \
    get_customer_last_name_and_order_items, write_us, delete_and_send


@dp.callback_query_handler(Text(startswith="act:pay-crypto"), CallbackStatus(2) | CallbackStatus(4))
async def pay_crypto(callback: types.CallbackQuery):
    """
    Crypto payment method handler
    :param callback: Telegram callback object
    """
    await callback.answer("–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É")
    order_id = int(callback.data.split()[1])
    session = create_session()
    order = session.query(Order).get(order_id)

    await bot.delete_message(order.customer, order.origin_msg)
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥", callback_data=f"act:pay-card {order.id}"))
    markup.row(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"act:cancel_order {order.id}"))
    _, _, order_items = await get_customer_last_name_and_order_items(order)
    crypto_wallets_list = "\n".join([f"*{wallet[0]}*: `{wallet[1]}`" for wallet in STRINGS.crypto_wallets])
    origin_msg_text = f"*–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ {order.id} –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã*\n\n{order_items}\n\n" \
                      f"–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –æ–¥–∏–Ω –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤\\.\n\n" \
                      f"_–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏:_\n\n{crypto_wallets_list}\n\n" \
                      f"–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ " \
                      f"*–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ* TxID " \
                      f"\\(–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\\)\\. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, {write_us()}"
    origin_msg = await bot.send_message(callback.from_user.id,
                                        origin_msg_text,
                                        reply_markup=markup, disable_web_page_preview=True)

    order.origin_msg = origin_msg.message_id
    order.status = 5
    session.commit()


@dp.message_handler(MessageStatus(5), chat_type=ChatType.PRIVATE)
async def pay_crypto_check(message: types.Message):
    """
    Crypto payment check method handler
    :param message: Telegram message object
    """
    txid = message.text
    session = create_session()
    order = session.query(Order).filter(Order.origin_msg == message.reply_to_message.message_id).first()

    first_name, last_name, order_items = await get_customer_last_name_and_order_items(order)
    origin_msg_text = f"*–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ {order.id} –æ–∂–∏–¥–∞–µ—Ç " \
                      f"–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã*\n\n{order_items}\n\n" \
                      f"–ù–∞—à–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—Ç —Ñ–∞–∫—Ç " \
                      f"—Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –Ω—É–∂–Ω—É—é —Å—É–º–º—É\\. " \
                      f"–ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç, –º—ã –Ω–∞—á–Ω—ë–º —Å–æ–±–∏—Ä–∞—Ç—å –∑–∞–∫–∞–∑\\. " \
                      f"–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ {write_us()}"

    status_msg_markup = InlineKeyboardMarkup()
    status_msg_markup.row(InlineKeyboardButton("‚úÖ–û–ø–ª–∞—á–µ–Ω–æ", callback_data=f"act:accept-payment {order.id}"),
                          InlineKeyboardButton("‚ùå–ù–ï –æ–ø–ª–∞—á–µ–Ω–æ", callback_data=f"act:deny-crypto-payment {order.id}"))
    status_msg_text = f"*–ó–∞–∫–∞–∑ ‚Ññ {order.id}*\n\n" \
                      f"*–ö–ª–∏–µ–Ω—Ç\\:* [{first_name} {last_name}]" \
                      f"(tg://user?id={order.customer})\n" \
                      f"*–°–æ—Å—Ç–∞–≤\\:*\n" \
                      f"{order_items}\n\n" \
                      f"*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {order.amount} —Ä—É–±\\.\n" \
                      f"*–ö–æ–º–∏—Å—Å–∏—è \\({STRINGS.fee}%\\)*: {order.total - order.amount} —Ä—É–±\\.\n" \
                      f"*–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {order.total} —Ä—É–±\\.\n" \
                      f"*–°—Ç–∞—Ç—É—Å:* \\#–æ–∂–∏–¥–∞–Ω–∏–µ\\_–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\\_–æ–ø–ª–∞—Ç—ã\n\n" \
                      f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–∫—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã\\.\n" \
                      f"–û–ø–ª–∞—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ *–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π*\\.\n" \
                      f"TxID: `{txid}`"
    await delete_and_send(session, order, origin_msg_text, status_msg_text,
                          status_msg_markup=status_msg_markup)

    order.status = 6
    session.commit()


@dp.callback_query_handler(Text(startswith="act:deny-crypto-payment"), CallbackStatus(6))
async def deny_crypto_payment(callback: types.CallbackQuery):
    """
    Deny crypto payment
    :param callback: Telegram callback object
    """
    order_id = callback.data.split()[1]
    session = create_session()
    order = session.query(Order).get(order_id)

    origin_msg_markup = InlineKeyboardMarkup()
    origin_msg_markup.row(InlineKeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥", callback_data=f"act:pay-card {order.id}"))
    origin_msg_markup.row(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"act:cancel_order {order.id}"))
    first_name, last_name, order_items = await get_customer_last_name_and_order_items(order)
    crypto_wallets_list = "\n".join([f"*{wallet[0]}*: `{wallet[1]}`" for wallet in STRINGS.crypto_wallets])
    origin_msg_text = f"*–í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ {order.id} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚ùå*\n\n{order_items}\n\n" \
                      f"–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –æ–¥–∏–Ω –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤\\.\n" \
                      f"_–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏:_\n\n{crypto_wallets_list}\n\n" \
                      f"–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ " \
                      f"*–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ* TxID " \
                      f"\\(–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\\)\\. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, {write_us()}"

    status_msg_text = f"*–ó–∞–∫–∞–∑ ‚Ññ {order.id} \\(–æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\\)*\n\n" \
                      f"*–ö–ª–∏–µ–Ω—Ç\\:* [{first_name} {last_name}]" \
                      f"(tg://user?id={order.customer})\n" \
                      f"*–°–æ—Å—Ç–∞–≤\\:*\n" \
                      f"{order_items}\n\n" \
                      f"*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {order.amount} —Ä—É–±\\.\n" \
                      f"*–ö–æ–º–∏—Å—Å–∏—è \\({STRINGS.fee}%\\)*: {order.total - order.amount} —Ä—É–±\\.\n" \
                      f"*–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {order.total} —Ä—É–±\\.\n" \
                      f"*–°—Ç–∞—Ç—É—Å:* \\#–æ–∂–∏–¥–∞–Ω–∏–µ\\_–æ–ø–ª–∞—Ç—ã\n\n"
    await delete_and_send(session, order, origin_msg_text, status_msg_text,
                          origin_msg_markup=origin_msg_markup)

    order.status = 5
    session.commit()
