"""
Bot endpoints for ordering products
"""
import logging
from math import ceil

from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.types.chat import ChatType
from aiogram.types.inline_keyboard import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.markdown import escape_md

from modules.bot import dp, bot
from modules.config import STRINGS
from modules.data.db_session import create_session
from modules.data.orders import Order
from modules.data.variables import Variable
from modules.helper import get_order_by_message, get_customer_last_name_and_order_items, write_us


@dp.callback_query_handler(Text(startswith="act:cancel_order"), chat_type=ChatType.PRIVATE)
async def cancel_order(callback: types.CallbackQuery):
    """
    Cancel order
    :param callback: Callback or message Telegram object
    """
    order_id = callback.data.split()[1]
    session = create_session()
    order = session.query(Order).get(order_id)
    for i in order.items:
        session.delete(i)
    session.delete(order)
    session.commit()
    logging.debug("User %s cancelled %s order", callback.from_user.id, order.id)
    await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω!")

    first_name, last_name, order_items = await get_customer_last_name_and_order_items(order)
    text = f"*–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ {order.id} –û–¢–ú–ï–ù–Å–ù ‚ùå\\!*\n\n{order_items}\n\n"

    await callback.message.edit_text(text, disable_web_page_preview=True)
    await bot.send_message(-STRINGS.new_orders_chat_id,
                           f"[{callback.from_user.first_name} {last_name}]"
                           f"(tg://user?id={callback.from_user.id}) "
                           f"–æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ ‚Ññ {order.id}")
    await bot.delete_message(-STRINGS.new_orders_chat_id, order.status_msg)


@dp.message_handler(chat_type=ChatType.GROUP, commands="accept")
async def accept_order(message: types.Message):
    """
    Accept new order (in admins group chat)
    :param message: Telegram message object
    """
    if not message.reply_to_message:
        logging.debug("User %s failed to accept order (no reply_to message)", message.from_user.id)
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º")
        return
    try:
        price_uan = float(message.text.replace(",", ".").strip().split()[1])
    except (IndexError, ValueError):
        logging.debug("User %s failed to accept order (amount not specified)", message.from_user.id)
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –≤ —é–∞–Ω—è—Ö")
        return

    session = create_session()
    order = await get_order_by_message(message, session)
    if not order:
        return

    exchange_rate = float(session.query(Variable)
                          .filter(Variable.name == "exchange_rate").first().value)
    price_rub = ceil(price_uan * exchange_rate)
    fee = float(price_rub) * STRINGS.fee / 100
    total_rub = ceil(price_rub + fee)
    fee = str(ceil(fee)).replace('.', '\\.')
    order.amount = price_rub
    order.total = total_rub
    order.status = 2
    session.commit()

    price_formatted = str(price_rub).replace(".", "\\.")
    price_uan = str(price_uan).replace(".", "\\.")
    total_rub = str(total_rub).replace('.', '\\.')

    first_name, last_name, order_items = await get_customer_last_name_and_order_items(order)
    status_msg_text = f"*–ó–∞–∫–∞–∑ ‚Ññ {order.id}*\n\n" \
                      f"*–ö–ª–∏–µ–Ω—Ç\\:* [{first_name} {last_name}]" \
                      f"(tg://user?id={order.customer})\n" \
                      f"*–°–æ—Å—Ç–∞–≤\\:*\n" \
                      f"{order_items}\n\n" \
                      f"*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {price_formatted} —Ä—É–±\\. \\({price_uan} —é–∞–Ω–µ–π\\)\n" \
                      f"*–ö–æ–º–∏—Å—Å–∏—è \\({STRINGS.fee}%\\)*: {fee} —Ä—É–±\\.\n" \
                      f"*–ò—Ç–æ–≥–æ:* {total_rub} —Ä—É–±\\.\n" \
                      f"*–°—Ç–∞—Ç—É—Å:* \\#–æ–∂–∏–¥–∞–Ω–∏–µ\\_–æ–ø–ª–∞—Ç—ã"
    await message.reply_to_message.edit_text(status_msg_text, disable_web_page_preview=True)
    await message.reply(f"–ó–∞–∫–∞–∑—É ‚Ññ {order.id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ –≤ {price_uan} —é–∞–Ω–µ–π "
                        f"\\= {price_formatted} —Ä—É–±\\. "
                        f"–ö–æ–º–∏—Å—Å–∏—è \\({STRINGS.fee}%\\): {fee} —Ä—É–±\\.")

    await bot.delete_message(order.customer, order.origin_msg)
    origin_msg_text = f"*–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ {order.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚úÖ\\!*\n\n{order_items}\n\n" \
                      f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {price_formatted} —Ä—É–±\\.\n" \
                      f"–ö–æ–º–∏—Å—Å–∏—è: {fee} —Ä—É–±\\.\n" \
                      f"*–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total_rub} —Ä—É–±\\.*\n\n" \
                      f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑\\.\n\n" \
                      f"*–°–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:*\n" \
                      f"_{', '.join(STRINGS.crypto_list)}_\n\n" \
                      f"–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º {write_us()}"
    origin_msg_markup = InlineKeyboardMarkup()
    origin_msg_markup.row(InlineKeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥", callback_data=f"act:pay-card {order.id}"))
    origin_msg_markup.row(InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data=f"act:pay-crypto {order.id}"))
    origin_msg_markup.row(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"act:cancel_order {order.id}"))
    origin_msg = await bot.send_message(order.customer, origin_msg_text,
                                        reply_markup=origin_msg_markup,
                                        disable_web_page_preview=True)
    order.origin_msg = origin_msg.message_id
    session.commit()


@dp.message_handler(chat_type=ChatType.GROUP, commands="deny")
async def deny_order(message: types.Message):
    """
    Deny new order (in admins group chat)
    :param message: Telegram message object
    """
    if not message.reply_to_message:
        logging.debug("User %s failed to deny order (no reply_to message)", message.from_user.id)
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º")
        return
    try:
        reason = " ".join(message.text.strip().split()[1:])
        if not reason:
            raise ValueError
    except (IndexError, ValueError):
        logging.debug("User %s failed to deny order (reason not specified)", message.from_user.id)
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞")
        return

    session = create_session()
    order = await get_order_by_message(message, session)
    if not order:
        return

    _, _, order_items = await get_customer_last_name_and_order_items(order)
    await bot.delete_message(-STRINGS.new_orders_chat_id, order.status_msg)
    await message.reply(f"–ó–∞–∫–∞–∑ ‚Ññ {order.id} –æ—Ç–∫–ª–æ–Ω—ë–Ω")

    origin_msg_text = f"*–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ {order.id} –û–¢–ö–õ–û–ù–Å–ù ‚ùå\\!*\n\n{order_items}\n\n" \
                      f"–ü—Ä–∏—á–∏–Ω–∞: {escape_md(reason)}\n\n" \
                      f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, –ø—Ä–∏–Ω—è–≤ –≤–æ –≤–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ\\. " \
                      f"–ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, {write_us()}"
    await bot.delete_message(order.customer, order.origin_msg)
    origin_msg = await bot.send_message(order.customer, origin_msg_text, disable_web_page_preview=True)

    order.origin_msg = origin_msg.message_id
    order.status = 3
    session.commit()
